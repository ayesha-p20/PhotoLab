Assignent 4: PhotoLab
Ayesha Parvez

This program implements the DIP operations from previous PhotoLab assignments in addition to 3 new DIP operations using pointers.Image.c consists of the IMAGE struct that stores the height,
width and R,G,B pixels of the image. This file also consists of functions such as CreateImage() which allocates memory to a pointer of type IMAGE based on the size of the stuct and the 
height and width passed as parameters. It also initializes its R,G,B pointers with NULL. DeleteImage() takes an IMAGE pointer as a parameter and deallocates memory allocated to the image
pointer and the R,G,B pointers it holds using free(). It also sets the IMAGE pointer to NULL. Other functions in Image.c include 3 set pixel functions and 3 get pixel functions. The former are used to assign a value to R,G,B pixels based on the parameters x and y, which indicate the location of the pixel. The latter 3 functions are used to retrieve R,G,B values of a pixel 
that has coordinates (x,y). Test_v2.c contains the code to generate AutoTest(). I didn't really make any changes to this file and FileIO.c,which contains function definitions of LoadImage()
and SaveImage(). I modified the header files and corresponding .c files of Advanced and DIPs. I converted to all function prototypes and function definitions to be compatible with pointers.
Instead of arrays, I either used temporary unsigned char variables to store R,G,B values during computation of the new pixel or I declared and used a new image pointer in the function to 
create a copy of the original image. I made sure that all the image pointers were either deleted or returned to avoid memory leaks. I used get pixel and set pixel functions to retrieve the
R,G,B values of a pixel for computing the new pixel and used set pixel functions to assign new R,G,B values to each pixel. In Advanced.c, I defined 3 new functions - Enlarge(), Square() and
BrightnessAndContrast() - to increase the size of an image, crop a square portion of the image and chnage the brightness and contrast of the image. For Enlarge(), the user enters the 
percentage by which the picture needs to be enlarged. If the values is negative, the program asks the user to enter another value. This continues until the user provides a valid input.
I check the value of the input in PhotoLab.c using a while loop. Inside Enlarge(), I check if the percentage is 100, in which case I return the image as it is. Otherwise, I divide the inputpecentage by 100 and multiply the height and width of the image by it. The new height and width are the dimensions of the new image. I then flip the formula for  finding the new pixel usingthe old pixel to represent the old pixel in terms of the new pixel. I then retrieve the value of the old pixel calculated in this way and assign this value to the corresponding new pixel. 
This ensures that no pixels int he new image are left without a value. In Square(), I determine the dimensions of the new image based on the parameters selected by the user. If the croppingamount from x-offset and y-offset exceeds the width or the height of the old image, then the new image has dimensions equal to either the width or the heigth that can be cropped from the 
offset, depending on which one is smaller. For ex, if old image has dimensions 400x500; x_offset, y_offset = 300, 200 and L = 300; then the new image will have size 100x100. To change the 
brightness and contrast of an image, the user passes brightness level and contrast level to BrightnessAndContrast(). I have used two sets of temporary variables to store the R,G,B values of
pixels during the computation of brightness and contrast. To find the new brightness, I add the brightness level to the existing R,G,B values and then check if the range in [0,255]. If the
pixel exceeds this range, I assign 255 to it and if it is less than this range, I assign 0 to it. I then use these temporary R,G,B values to find the contrast using the formula provided in the slides. Again, I check if each pixel is in range [0,255], otherwise I assign 55 or 0 based on the rule described above. Finally, in every function in DIPs.c and Advanced.c, I assign 
the width and height of the image, which is one of the arguments of every DIP function and assign these values to width,height. I also check to make sure that image is not NULL and R,G,B
are not NULL using assert(). In DIPs.c, I replaced arrays in all functions with pointers or temorary variables to hold R,G,B values.Like in Advanced.c, I was careful to delete or return
all pointers in the function to avoid memory leaks. In PhotoLab.c, I modifie PrintMenu() to include more options. I also deleted the definition of AutoTest() in this file. Finally, I added
more options to switch contruct and added a condition at the end of the while loop to check if a non-null IMAGE pointer exists and if it should be deleted. I used 3 int variables - option,
prev_option and option_before_previous to determine the existence of a non-null image. I used these variables to determine based on previous options selected and the current option if a 
non-null image exists and if it should be deleted. This helped me get rid of memory leaks in the program. I also captured the returned value of AutoTest() to see if it was executed 
successfully. Within Makfefile, I added 4 new targets to generate Test.o, Image.o, Test_DEBUG.o and FileIO_DEBUG.o. The first 2 simply generate the object files for corresponding .c files.
The other 2 generate object files with DEBUG enabled. I used the latter two files to create PhotoLabTest since it runs the programin DEBUG mode. I also added more image names to 'clean'
target to clear all intermediate images. Finally, I ran valgrind to check memory leaks and fixed the errors it showed.
